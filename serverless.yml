service: sparcs-email-service

custom:
  projectName: sparcs-events
  serviceName: email
  stage: ${opt:stage, self:provider.stage}
  registrations: ${self:custom.stage}-${self:custom.projectName}-registrations
  emailQueue: ${self:custom.stage}-${self:custom.projectName}-email-queue.fifo
  sendgridApiKeyName: ${self:custom.stage}-${self:custom.projectName}-sendgrid-api-key
  frontendUrl:
    dev: https://sparcs-event-platform-git-stage-sparcss-projects.vercel.app
    prod: https://www.techtix.app
  smtpUsernameKey: ${self:custom.projectName}-techtix-smtp-username
  smtpPasswordKey: ${self:custom.projectName}-techtix-smtp-password
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - requests
      - boto3
      - botocore
    layer:
      name: sparcs-events-${self:custom.stage}-python-requirements
      compatibleRuntimes:
        - python3.8
    slim: true

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: ap-southeast-1
  versionFunctions: false
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:custom.stage}
    EMAIL_QUEUE: ${self:custom.emailQueue}
    SENDER_EMAIL: contact@sparcsup.com
    SENDGRID_API_KEY_NAME: ${self:custom.sendgridApiKeyName}
    FRONTEND_URL: ${self:custom.frontendUrl.${self:custom.stage}}
    REGISTRATIONS_TABLE: ${self:custom.registrations}
    SES_SMTP_USERNAME_KEY: ${self:custom.smtpUsernameKey}
    SES_SMTP_PASSWORD_KEY: ${self:custom.smtpPasswordKey}
    SES_SMTP_HOST: email-smtp.ap-southeast-1.amazonaws.com


resources:
  - ${file(resources/sqs.yml)}

functions:
  - ${file(resources/send_email.yml)}

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

package:
  patterns:
    - "setup/**"
    - "src/**"
    - "!requirements.txt"
    - "!.serverless/**"
    - "!venv/**"
    - "!node_modules/**"
    - "!.idea/**"
    - "!node_modules**"
    - "!package.json"
    - "!package-lock.json"
    - "!Pipfile"
    - "!Pipfile.lock"
